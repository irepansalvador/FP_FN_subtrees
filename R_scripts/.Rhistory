box()
my.colors <- rainbow(10)
for (i in 15)
{
ii = i
lines(x= Mr, y = my_table[,ii], col="black",lwd=1.5)
}
for (i in 15)
{
ii = i
lines(x= Mr, y = my_table2[,ii], col="red",lwd=1.5)
}
require(graphics)
t = 0:16 # time points
x = 100    # prob to have 0 mutations
x0 = 0
p = 0.1195 # RATE = 1 mutations per hour
ppois(x, lambda = p * t) - ppois(x0, lambda = p * t)
plot(t, (ppois(x, lambda = p * t) - ppois(x0, lambda = p * t) ), type = "s", ylab = "F(x)", main = "Poisson (100-0)", ylim = c(0,1))
grid()
cumsum(dgeom(x = 0:16,prob = p))
lines(cumsum(dgeom(x = 0:15,prob = 0.12)))
pgeom(q=0:15,prob = p)
Mr = seq(from= 0.0001, to = 0.002, by = 0.0001)
Cc = 0:1440
unmutated = 0.13045 ## observed unmutated proportion
my_table = matrix(ncol = length(Cc), nrow = length(Mr),
dimnames = list(Mr,Cc))
for(i in 0:length(Mr))
{
my_table[i,] = pgeom(Cc,Mr[i])
}
length(my_table[1,])
head(my_table[14,Cc])
plot(Mr,xlim = c(0,0.002),  ylim=c(0,1), cex.main=0.8,
main=paste("Mutated sites after N hrs", sep=""),
ylab="Cumulative probability", xlab="Mutation rate / per minute", axes = F)
axis(1,at = seq(from= 0.0, to = 0.002, by = 0.0005),cex.axis= 0.8)
axis(2,at = seq(from= 0.0, to = 1, by = 0.1),cex.axis= 0.8, las = 1)
box()
my.colors <- rainbow(6)
length(my_table)
t = (1:6)*4*60
for (i in 1:6)
{
lines(x= Mr, y = my_table[,t[i]],
col=my.colors[i],lwd=2.5)
}
grid()
abline(v = 0.0014, lty = 2)
legend(x = 0.0015,y = 0.6,legend = c("4h","8h","12h","16h","20h","24h"),
col = my.colors,lty = 1,lwd = 2,cex = 0.8)
my_opt = which(abs((1-unmutated)-my_table[,1440])==min(abs((1-unmutated)-my_table[,1440])))
my_opt
mut = 1-unmutated
abs(tail(my_table[14,1440]) -mut)
abs(tail(my_table[15,1440]) - mut)
tail(Cc)
my_table[,'1440']
my_table[,1440]
ppois(0, lambda = 1440 * 0.0014)
plot(NA,xlim = c(0,1440),  ylim=c(0,1), cex.main=0.8,
main=paste("Mutated sites after N hrs", sep=""),
ylab="Cumulative probability", xlab="Hours", axes = F)
axis(1, as.character(c(0:6)*4),at = seq(from= 0, to = 1440, by = (60*4)),cex.axis= 0.8)
axis(2,at = seq(from= 0.0, to = 1, by = 0.1),cex.axis= 0.8, las = 1)
box()
lines(Cc, 1-(ppois(0, lambda = Cc * 0.0014) ), type = "s", ylab = "F(x)",
main = "Poisson (0 after N mins)", ylim = c(0,1), col= "red", lwd= 3)
grid()
Tsamp = c(1:24)*60
lines(Tsamp, 1-(ppois(0, lambda = Tsamp * 0.0014) ), type = "s",
col= "blue", lwd= 3)
Tsamp = c(0:16)*90
lines(Tsamp, 1-(ppois(0, lambda = Tsamp * 0.0014) ), type = "s",
col= "orange", lwd= 3)
Tsamp = c(0:12)*120
lines(Tsamp, 1-(ppois(0, lambda = Tsamp * 0.0014) ), type = "s",
col= "black", lwd= 3)
Tsamp = c(0:6)*60*4
lines(Tsamp, 1-(ppois(0, lambda = Tsamp * 0.0014) ), type = "s",
col= "purple", lwd= 3)
Tsamp = c(0:16)*90
1-(ppois(0, lambda = Tsamp * 0.0014))
c(0,pgeom(q = 0:15,prob = 0.1195))
1-(dpois(x =0,lambda = ((1:5)*60) * 0.0014 ))
1-(ppois(0,lambda = ((1:5)*60) * 0.0014 ))
rpois(n = c(0:16),lambda = Tsamp * 0.0014)
sum(rpois(n = c(0:16),lambda = Tsamp * 0.0014))
scen = hpp.scenario(rate = 0.0014, num.events = 1, num.sims = 1000)
plot(scen, main='My HPP Scenario')
mean(scen@x.bar)
muts <- scen@x.bar
muts[muts<1] = 0
require(poisson)
scen = hpp.scenario(rate = 0.0014, num.events = 1, num.sims = 1000)
plot(scen, main='My HPP Scenario')
mean(scen@x.bar)
muts <- scen@x.bar
muts[muts<1] = 0
mean(muts)
hpmean <- hpp.mean(0.0014, t0 = 0, t1 = 1440, num.points = 1000, maximum =1)
hist(hpmean)
mean(hpmean)
rate <- 10
hpp.mean.event.times(rate, 50)
hpp.plot(rate = 0.014,num.events =  10, num.sims = 100, t0 = 0, t1 = NULL,
num.points = 100, quantiles = c(0.25, 0.75))
scen = hpp.scenario(rate = 0.0014, num.events = 1, num.sims = 100)
show(scen)
hpp.plot(rate = 0.014,num.events =  11, num.sims = 1000, t0 = 0, t1 = NULL,
num.points = 100, quantiles = c(0.25, 0.75))
hpp.plot(rate = 0.014,num.events =  11, num.sims = 1000, t0 = 0, t1 = NULL,
num.points = 100, quantiles = c(0.05, 0.95))
hpp.plot(rate = 0.014,num.events =  1, num.sims = 1000, t0 = 0, t1 = NULL,
num.points = 100, quantiles = c(0.05, 0.95))
hpp.plot(rate = 0.0014,num.events =  1, num.sims = 1000, t0 = 0, t1 = NULL,
num.points = 100, quantiles = c(0.05, 0.95))
scen = hpp.scenario(rate = 0.0014, num.events = 1, num.sims = 100)
show(scen)
scen@x
hist(scen@x[1,])
hist(scen@x[2,])
hpmean <- hpp.mean(0.0014, t0 = 0, t1 = 1440, num.points = 1000, maximum =1)
hist(hpmean)
mean(hpmean)
hpp.mean.event.times(rate, 50)
hist(scen@x[2,])
hist(scen@x[2,], breaks = 90)
hist(scen@x[2,], breaks = 20)
require(poisson)
## Imagine a scenario where we expect 5 events per unit of time, on average,
## and don't expect that average to change. We want to analyse the distribution
## of paths and hitting times of observing 20 events. To simulate and view the scenario, run:
scen = hpp.scenario(rate = 0.0014, num.events = 1, num.sims = 1000)
plot(scen, main='My HPP Scenario')
mean(scen@x.bar)
muts <- scen@x.bar
muts[muts<1] = 0
mean(muts)
##
## Calculate the expected value of an homogeneous Poisson process at regular points in time.
hpmean <- hpp.mean(0.0014, t0 = 0, t1 = 1440, num.points = 1000, maximum =1)
hist(hpmean)
mean(hpmean)
rate <- 10
hpp.mean.event.times(rate, 50)
## Simulate and plot simulated homogeneous Poisson processes, also returning the mean and quantile
## processes.
hpp.plot(rate = 0.0014,num.events =  1, num.sims = 10000, t0 = 0, t1 = NULL,
num.points = 100, quantiles = c(0.05, 0.99))
scen = hpp.scenario(rate = 0.0014, num.events = 1, num.sims = 50000)
show(scen)
scen@x
hist(scen@x[2,], breaks = 50)
abline(v = c(1:3)*1440)
hpp.plot(rate = 0.0014,num.events =  1, num.sims = 1000, t0 = 0, t1 = NULL,
num.points = 100, quantiles = c(0.05, 0.99))
scen = hpp.scenario(rate = 0.0014, num.events = 1, num.sims = 1000)
show(scen)
scen@x
hist(scen@x[2,], breaks = 50)
abline(v = c(1:3)*1440)
hpp.plot(rate = 0.0014,num.events =  1, num.sims = 1000, t0 = 0, t1 = NULL,
num.points = 100, quantiles = c(0.05, 0.99))
scen = hpp.scenario(rate = 0.0014, num.events = 1, num.sims = 1000)
show(scen)
scen@x
hist(scen@x[2,], breaks = 50)
abline(v = c(1:3)*1440)
unmutated = 0.5
## for many different mutation rates
Mr = seq(from= 0.1, to = 0.2, by = 0.0005)
## for 0 to 17 cell divisions
Cc = 0:17
## calculate the cumulative probab density and save it to a table
my_table = matrix(ncol = length(Cc), nrow = length(Mr),
dimnames = list(Mr,Cc))
for(i in 1:length(Mr))
{
#print(cumsum(dgeom(Cc,Mr[i])))
my_table[i,] = cumsum(dgeom(Cc,Mr[i]))
}
for (i in 16)
{
my_opt = which(abs((1-unmutated)-my_table[,i])==min(abs((1-unmutated)-my_table[,i])))
print(paste("for Ndiv = ",i, "the mutation rate is: ", rownames(my_table)[my_opt], sep =""))
}
unmutated = 0.5
## for many different mutation rates
Mr = seq(from= 0.05, to = 0.1, by = 0.0005)
## for 0 to 17 cell divisions
Cc = 0:17
## calculate the cumulative probab density and save it to a table
my_table = matrix(ncol = length(Cc), nrow = length(Mr),
dimnames = list(Mr,Cc))
for(i in 1:length(Mr))
{
#print(cumsum(dgeom(Cc,Mr[i])))
my_table[i,] = cumsum(dgeom(Cc,Mr[i]))
}
for (i in 16)
{
my_opt = which(abs((1-unmutated)-my_table[,i])==min(abs((1-unmutated)-my_table[,i])))
print(paste("for Ndiv = ",i, "the mutation rate is: ", rownames(my_table)[my_opt], sep =""))
}
unmutated = 0.5
## for many different mutation rates
Mr = seq(from= 0.01, to = 0.1, by = 0.0005)
## for 0 to 17 cell divisions
Cc = 0:17
## calculate the cumulative probab density and save it to a table
my_table = matrix(ncol = length(Cc), nrow = length(Mr),
dimnames = list(Mr,Cc))
for(i in 1:length(Mr))
{
#print(cumsum(dgeom(Cc,Mr[i])))
my_table[i,] = cumsum(dgeom(Cc,Mr[i]))
}
for (i in 16)
{
my_opt = which(abs((1-unmutated)-my_table[,i])==min(abs((1-unmutated)-my_table[,i])))
print(paste("for Ndiv = ",i, "the mutation rate is: ", rownames(my_table)[my_opt], sep =""))
}
# create empty plot
plot(Mr,xlim = c(0,0.1),  ylim=c(0.3,0.7),
main=paste("Cumulative probability of mutated sites", sep=""),
ylab="P(Deletion)", xlab="Mutation rate")
#define colors
colors <- rainbow(7)
# plot for every Cell division the cumulative probability at different mutation rates
for (i in 16))
{
ii = i
lines(x= Mr, y = my_table[,ii], col=colors[i],lwd=2.5)
}
#define colors
colors <- rainbow(7)
for (i in 16)
{
ii = i
lines(x= Mr, y = my_table[,ii], col=colors[i],lwd=2.5)
}
# plot the real proportion
abline(h = (1-unmutated), col = "black", lty=3,lwd=2)
# make grid to see it more easily
for (i in c(seq(0.1,0.2,0.002)))
{
abline(v =i, col = "grey", lty=2,lwd=0.5)
}
for (i in c(seq(0.1,0.2,0.01)))
{
abline(v =i, col = "grey", lty=2,lwd=1.5)
}
# inset with color code
legend(legend = 10 +c(1:7), x = 0.18, y = 0.88,lwd= 2, lty=1,
title="Cell cycles", col=colors)
# make grid to see it more easily
for (i in c(seq(0,0.1,0.002)))
{
abline(v =i, col = "grey", lty=2,lwd=0.5)
}
# make grid to see it more easily
for (i in c(seq(0,0.1,0.02)))
{
abline(v =i, col = "grey", lty=2,lwd=0.5)
}
# create empty plot
plot(Mr,xlim = c(0,0.1),  ylim=c(0.3,0.7),
main=paste("Cumulative probability of mutated sites", sep=""),
ylab="P(Deletion)", xlab="Mutation rate")
#define colors
colors <- rainbow(7)
for (i in 16)
{
ii = i
lines(x= Mr, y = my_table[,ii], col=colors[i],lwd=2.5)
}
# plot the real proportion
abline(h = (1-unmutated), col = "black", lty=3,lwd=2)
# make grid to see it more easily
for (i in c(seq(0,0.1,0.02)))
{
abline(v =i, col = "grey", lty=2,lwd=0.5)
}
for (i in c(seq(0.1,0.2,0.01)))
{
abline(v =i, col = "grey", lty=2,lwd=1.5)
}
my_table[,ii]
## for many different mutation rates
Mr = seq(from= 0.01, to = 0.1, by = 0.0005)
## for 0 to 17 cell divisions
Cc = 0:17
## calculate the cumulative probab density and save it to a table
my_table = matrix(ncol = length(Cc), nrow = length(Mr),
dimnames = list(Mr,Cc))
for(i in 1:length(Mr))
{
#print(cumsum(dgeom(Cc,Mr[i])))
my_table[i,] = cumsum(dgeom(Cc,Mr[i]))
}
for (i in 16)
{
my_opt = which(abs((1-unmutated)-my_table[,i])==min(abs((1-unmutated)-my_table[,i])))
print(paste("for Ndiv = ",i, "the mutation rate is: ", rownames(my_table)[my_opt], sep =""))
}
for (i in 6)
{
ii = i + 10
lines(x= Mr, y = my_table[,ii], col=colors[i],lwd=2.5)
}
# create empty plot
plot(Mr,xlim = c(0,0.1),  ylim=c(0,1),
main=paste("Cumulative probability of mutated sites", sep=""),
ylab="P(Deletion)", xlab="Mutation rate")
#define colors
colors <- rainbow(7)
for (i in 6)
{
ii = i + 10
lines(x= Mr, y = my_table[,ii], col=colors[i],lwd=2.5)
}
# plot the real proportion
abline(h = (1-unmutated), col = "black", lty=3,lwd=2)
# create empty plot
plot(Mr,xlim = c(0,0.1),  ylim=c(0.1,0.8),
main=paste("Cumulative probability of mutated sites", sep=""),
ylab="P(Deletion)", xlab="Mutation rate")
#define colors
colors <- rainbow(7)
for (i in 6)
{
ii = i + 10
lines(x= Mr, y = my_table[,ii], col=colors[i],lwd=2.5)
}
# plot the real proportion
abline(h = (1-unmutated), col = "black", lty=3,lwd=2)
unmutated = 0.5
## for many different mutation rates
Mr = seq(from= 0.005, to = 0.12, by = 0.0005)
## for 0 to 17 cell divisions
Cc = 0:17
## calculate the cumulative probab density and save it to a table
my_table = matrix(ncol = length(Cc), nrow = length(Mr),
dimnames = list(Mr,Cc))
for(i in 1:length(Mr))
{
#print(cumsum(dgeom(Cc,Mr[i])))
my_table[i,] = cumsum(dgeom(Cc,Mr[i]))
}
for (i in 16)
{
my_opt = which(abs((1-unmutated)-my_table[,i])==min(abs((1-unmutated)-my_table[,i])))
print(paste("for Ndiv = ",i, "the mutation rate is: ", rownames(my_table)[my_opt], sep =""))
}
# create empty plot
plot(Mr,xlim = c(0,0.1),  ylim=c(0.1,0.8),
main=paste("Cumulative probability of mutated sites", sep=""),
ylab="P(Deletion)", xlab="Mutation rate")
#define colors
colors <- rainbow(7)
for (i in 6)
{
ii = i + 10
lines(x= Mr, y = my_table[,ii], col=colors[i],lwd=2.5)
}
# plot the real proportion
abline(h = (1-unmutated), col = "black", lty=3,lwd=2)
# make grid to see it more easily
for (i in c(seq(0,0.1,0.02)))
{
abline(v =i, col = "grey", lty=2,lwd=0.5)
}
for (i in c(seq(0.1,0.2,0.01)))
{
abline(v =i, col = "grey", lty=2,lwd=1.5)
}
# create empty plot
plot(Mr,xlim = c(0,0.1),  ylim=c(0,1),
main=paste("Cumulative probability of mutated sites", sep=""),
ylab="P(Deletion)", xlab="Mutation rate")
#define colors
colors <- rainbow(7)
for (i in 6)
{
ii = i + 10
lines(x= Mr, y = my_table[,ii], col=colors[i],lwd=2.5)
}
# plot the real proportion
abline(h = (1-unmutated), col = "black", lty=3,lwd=2)
# create empty plot
plot(Mr,xlim = c(0,0.12),  ylim=c(0,1),
main=paste("Cumulative probability of mutated sites", sep=""),
ylab="P(Deletion)", xlab="Mutation rate")
#define colors
colors <- rainbow(7)
for (i in 6)
{
ii = i + 10
lines(x= Mr, y = my_table[,ii], col=colors[i],lwd=2.5)
}
# plot the real proportion
abline(h = (1-unmutated), col = "black", lty=3,lwd=2)
# make grid to see it more easily
for (i in c(seq(0,0.1,0.02)))
{
abline(v =i, col = "grey", lty=2,lwd=0.5)
}
for (i in c(seq(0.1,0.2,0.01)))
{
abline(v =i, col = "grey", lty=2,lwd=1.5)
}
for (i in c(seq(0,0.12,0.01)))
{
abline(v =i, col = "grey", lty=2,lwd=1.5)
}
# inset with color code
legend(legend = 10 +c(1:7), x = 0.18, y = 0.88,lwd= 2, lty=1,
title="Cell cycles", col=colors)
# inset with color code
legend(legend = 10 +c(1:7), x = 0.18, y = 0.88,lwd= 2, lty=1,
title="Cell cycles", col=colors)
install.packages("entropy")
p = choose(5,2)
p = choose(6,2)
p = choose(4,2)
p = choose(5,2)
library(ape)
library(data.tree)
setwd(dir = "Desktop/Github/FP_FN_subtrees/R_scripts/")
a = 	"Oxx0O0v000xut0x00N_Oxxxx_Qx0P0v0"
b = 	"Oxx0O00000x0t00x0N00xxxx_Qx0P000"
c = 	"O0x0O0x000x0t0w00N00xxxx_Qx0Px00"
d	=   "O0x0O0000dx0tw000N00xxxx_Qx0P000"
r = paste(replicate(32, "0"),collapse = "")
## create dist matrix
mydist <- stringdistmatrix(c(a,b,c,d,r), useNames = F)
library(stringdist)
setwd(dir = "Desktop/Github/FP_FN_subtrees/R_scripts/")
a = 	"Oxx0O0v000xut0x00N_Oxxxx_Qx0P0v0"
b = 	"Oxx0O00000x0t00x0N00xxxx_Qx0P000"
c = 	"O0x0O0x000x0t0w00N00xxxx_Qx0Px00"
d	=   "O0x0O0000dx0tw000N00xxxx_Qx0P000"
r = paste(replicate(32, "0"),collapse = "")
## create dist matrix
mydist <- stringdistmatrix(c(a,b,c,d,r), useNames = F)
## calculate NJ
mytree <-  nj(mydist)
## reroot
r5 <- root(mytree, resolve.root = T, outgroup =  5 )
plot(r5)
library(stringdist)
library(data.tree)
setwd(dir = "Desktop/Github/FP_FN_subtrees/R_scripts/")
a = 	"Oxx0O0v000xut0x00N_Oxxxx_Qx0P0v0"
b = 	"Oxx0O00000x0t00x0N00xxxx_Qx0P000"
c = 	"O0x0O0x000x0t0w00N00xxxx_Qx0Px00"
d	=   "O0x0O0000dx0tw000N00xxxx_Qx0P000"
r = paste(replicate(32, "0"),collapse = "")
## create dist matrix
mydist <- stringdistmatrix(c(a,b,c,d,r), useNames = F)
## calculate NJ
mytree <-  nj(mydist)
## reroot
r5 <- root(mytree, resolve.root = T, outgroup =  5 )
plot(r5)
a = 	"Oxx0O0v000xut0x00N_Oxxxx_Qx0P0v0"
b = 	"Oxx0O00000x0t00x0N00xxxx_Qx0P000"
c = 	"O0x0O0x000x0t0w00N00xxxx_Qx0Px00"
d	=   "O0x0O0000dx0tw000N00xxxx_Qx0P000"
r = paste(replicate(32, "0"),collapse = "")
## create dist matrix
mydist <- stringdistmatrix(c(a,b,c,d,r), useNames = F)
## calculate NJ
mytree <-  nj(mydist)
## reroot
r5 <- root(mytree, resolve.root = T, outgroup =  5 )
plot(r5)
detach("package:ape", unload=TRUE)
setwd(dir = "Desktop/Github/FP_FN_subtrees/R_scripts/")
a = 	"Oxx0O0v000xut0x00N_Oxxxx_Qx0P0v0"
b = 	"Oxx0O00000x0t00x0N00xxxx_Qx0P000"
c = 	"O0x0O0x000x0t0w00N00xxxx_Qx0Px00"
d	=   "O0x0O0000dx0tw000N00xxxx_Qx0P000"
r = paste(replicate(32, "0"),collapse = "")
## create dist matrix
mydist <- stringdistmatrix(c(a,b,c,d,r), useNames = F)
## calculate NJ
mytree <-  nj(mydist)
## reroot
r5 <- root(mytree, resolve.root = T, outgroup =  5 )
plot(r5)
detach("package:data.tree", unload=TRUE)
# write tree to output
write.tree(r5, file = "test.nw")
library(ape)
library(stringdist)
library(data.tree)
setwd(dir = "Desktop/Github/FP_FN_subtrees/R_scripts/")
a = 	"Oxx0O0v000xut0x00N_Oxxxx_Qx0P0v0"
b = 	"Oxx0O00000x0t00x0N00xxxx_Qx0P000"
c = 	"O0x0O0x000x0t0w00N00xxxx_Qx0Px00"
d	=   "O0x0O0000dx0tw000N00xxxx_Qx0P000"
r = paste(replicate(32, "0"),collapse = "")
## create dist matrix
mydist <- stringdistmatrix(c(a,b,c,d,r), useNames = F)
## calculate NJ
mytree <-  nj(mydist)
## reroot
r5 <- root(mytree, resolve.root = T, outgroup =  5 )
plot(r5)
